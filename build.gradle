/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10.2/userguide/java_library_plugin.html
 */

// Definint Main class
///////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////
// Repositories and dependencies for code go here
///////////////////////////////////////////////////////////////////////////



buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath ("org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4")
    }
}

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java'
    id 'application'
    id 'java-library'
    id 'checkstyle'
    id "com.github.spotbugs" version "1.6.5"
}

//mainClassName = 'main.java.Main'

repositories {
  mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    // in case JUnit 4 is also needed/wanted
    compile("junit:junit:4.12")
    //testCompile("junit:junit:4.12")
    testRuntime("org.junit.vintage:junit-vintage-engine:4.12.0-M4")

    //testCompile("org.junit.jupiter:junit-jupiter-api:5.0.0-M4")
    //testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.0-M4")

    // Enable use of the JUnitPlatform Runner within the IDE
    //testCompile("org.junit.platform:junit-platform-runner:1.0.0-M4")
    
   // junitXmlToHtml 'org.apache.ant:ant-junit:1.9.7'
}

sourceSets.main.java.srcDirs = ['src']


apply plugin: 'checkstyle'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'
//apply plugin: 'jacoco'
 
mainClassName = "main.java.Main"

// checkstyle {
//     toolVersion '7.8.1'
//     configFile file("config/checkstyle/checkstyle.xml")
// }
// checkstyleMain {
//     source ='src/main/java'
// }
// checkstyleTest {
//     source ='src/test/java'
// }



junitPlatform {
    details 'tree'
}




//afterEvaluate {
//    def junitPlatformTestTask = (JavaExec) project.tasks.getByName('junitPlatformTest')
//
//    jacoco {
//        applyTo(junitPlatformTestTask)
 //   }
//
//    project.task(type: JacocoReport, "jacocoJupTestReport") {
//        executionData(junitPlatformTestTask)
//        sourceSets(sourceSets.main)
//        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
//        classDirectories = files(sourceSets.main.output)
//
//        reports {
//            xml.enabled true
//            xml.destination file("${buildDir}/jacoco/report.xml")
//            html.enabled true
//            html.destination file("${buildDir}/jacoco/html")
//        }
//    }
//
//    check.dependsOn jacocoJupTestReport
//}
//configurations {
//    junitXmlToHtml
//}

// task generateHtmlTestReports {
// 	doLast {
//	    def reportsDir = new File(buildDir, 'test-reports')
//	    reportsDir.mkdirs()
//	
//	    ant.taskdef(
//	        name: 'junitReport',
//	        classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
//	        classpath: configurations.junitXmlToHtml.asPath
//	    )
//	
//	    ant.junitReport(todir: "$buildDir/test-results/junit-platform", tofile: "aggregated-test-results.xml") {
//	        fileset(dir: "$buildDir/test-results/junit-platform")
//	        report(format: 'frames', todir: reportsDir)
//	    }
 //   }
//}

// afterEvaluate {
//     def junitPlatformTestTask = tasks.getByName('junitPlatformTest')
//     generateHtmlTestReports.dependsOn(junitPlatformTestTask)
//     check.dependsOn(generateHtmlTestReports)
// }


// In this section you declare where to find the dependencies of your project
//repositories {
//    // Use jcenter for resolving your dependencies.
//    // You can declare any Maven/Ivy/file repository here.
//    jcenter()
//}

checkstyle {
  // Keep checkstyle a little quieter
  ignoreFailures = true
  showViolations = false
  
  configFile = project(':').file('config/checkstyle/checkstyle.xml')
  //configProperties = [ "suppressionFile" : project(':').file('config/checkstyle/suppressions.xml')]
  
}

tasks.withType(Checkstyle) {
  reports {
    html.enabled = true
    xml.enabled = false
  }
}
checkstyle {
    toolVersion = "8.8"
}

// Configure SpotBugs

// The part below needs to be included for Spotbugs
 spotbugs {
   toolVersion = '3.1.8' // '1.6.5' //'3.1.9'
   
   //less bugs
   //effort = "min"
   //reportLevel = "high"
   
   //standard
   //effort = "less"
   //reportLevel = "medium"
   
 }

// To generate an HTML report instead of XML
 tasks.withType(com.github.spotbugs.SpotBugsTask) {
   reports {
     xml.enabled = false
     html.enabled = true
   }
 }


